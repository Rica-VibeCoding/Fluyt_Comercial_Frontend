# FastAPI Controller para Equipe - CRUD COMPLETO
from fastapi import APIRouter, Depends, HTTPException, Query, status
from fastapi.responses import JSONResponse
from .schemas import (
    EquipeCreate, EquipeUpdate, EquipeResponse, 
    EquipeListResponse, EquipeStatusToggleResponse
)
from .repository import EquipeRepository
from typing import Optional, Dict, Any
import logging

logger = logging.getLogger(__name__)

# ‚úÖ CORRE√á√ÉO: Removido prefix para evitar duplica√ß√£o (/api/v1/equipe/equipe/)
router = APIRouter(tags=['üë• Equipe'])

# Dependency para repository
async def get_equipe_repository() -> EquipeRepository:
    return EquipeRepository()

@router.get('/', response_model=EquipeListResponse, summary="Listar funcion√°rios")
async def listar_funcionarios(
    loja_id: Optional[str] = Query(None, description="Filtrar por loja"),
    setor_id: Optional[str] = Query(None, description="Filtrar por setor"),
    ativo: Optional[bool] = Query(None, description="Filtrar por status ativo"),
    perfil: Optional[str] = Query(None, description="Filtrar por perfil"),
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Listar todos os funcion√°rios com filtros opcionais
    
    - **loja_id**: UUID da loja para filtrar
    - **setor_id**: UUID do setor para filtrar  
    - **ativo**: true/false para funcion√°rios ativos/inativos
    - **perfil**: VENDEDOR, GERENTE, etc.
    """
    try:
        logger.info(f"üìã Listando funcion√°rios com filtros: loja={loja_id}, setor={setor_id}, ativo={ativo}, perfil={perfil}")
        
        # Preparar filtros
        filters = {}
        if loja_id:
            filters["loja_id"] = loja_id
        if setor_id:
            filters["setor_id"] = setor_id
        if ativo is not None:
            filters["ativo"] = ativo
        if perfil:
            filters["perfil"] = perfil
        
        # Buscar funcion√°rios
        funcionarios = await repository.list_all(filters)
        
        # Calcular estat√≠sticas
        total = len(funcionarios)
        ativos = len([f for f in funcionarios if f.ativo])
        inativos = total - ativos
        
        # Agrupar por loja
        por_loja = {}
        for f in funcionarios:
            loja = f.loja_nome or "Sem loja"
            por_loja[loja] = por_loja.get(loja, 0) + 1
        
        # Agrupar por setor
        por_setor = {}
        for f in funcionarios:
            setor = f.setor_nome or "Sem setor"
            por_setor[setor] = por_setor.get(setor, 0) + 1
        
        response = EquipeListResponse(
            funcionarios=funcionarios,
            total=total,
            ativos=ativos,
            inativos=inativos,
            por_loja=por_loja,
            por_setor=por_setor
        )
        
        logger.info(f"‚úÖ {total} funcion√°rios listados com sucesso")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao listar funcion√°rios: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao listar funcion√°rios: {str(e)}"
        )

@router.get('/{funcionario_id}', response_model=EquipeResponse, summary="Buscar funcion√°rio por ID")
async def obter_funcionario(
    funcionario_id: str,
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Buscar um funcion√°rio espec√≠fico por ID
    
    - **funcionario_id**: UUID do funcion√°rio
    """
    try:
        logger.info(f"üîç Buscando funcion√°rio ID: {funcionario_id}")
        
        funcionario = await repository.get_by_id(funcionario_id)
        
        if not funcionario:
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {funcionario_id} n√£o encontrado")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Funcion√°rio com ID {funcionario_id} n√£o encontrado"
            )
        
        logger.info(f"‚úÖ Funcion√°rio {funcionario.nome} encontrado")
        return funcionario
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao buscar funcion√°rio {funcionario_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao buscar funcion√°rio: {str(e)}"
        )

@router.post('/', response_model=EquipeResponse, status_code=status.HTTP_201_CREATED, summary="Criar funcion√°rio")
async def criar_funcionario(
    funcionario_data: EquipeCreate,
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Criar um novo funcion√°rio
    
    - **nome**: Nome completo (obrigat√≥rio)
    - **email**: Email v√°lido (opcional)
    - **setor_id**: UUID do setor (obrigat√≥rio)
    - **loja_id**: UUID da loja (obrigat√≥rio)
    - **perfil**: VENDEDOR, GERENTE, etc. (padr√£o: VENDEDOR)
    - **ativo**: Status ativo (padr√£o: true)
    - Todos os demais campos s√£o opcionais
    """
    try:
        logger.info(f"‚ûï Criando funcion√°rio: {funcionario_data.nome}")
        
        funcionario_criado = await repository.create(funcionario_data)
        
        logger.info(f"‚úÖ Funcion√°rio {funcionario_criado.nome} criado com sucesso - ID: {funcionario_criado.id}")
        return funcionario_criado
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar funcion√°rio: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao criar funcion√°rio: {str(e)}"
        )

@router.put('/{funcionario_id}', response_model=EquipeResponse, summary="Atualizar funcion√°rio")
async def atualizar_funcionario(
    funcionario_id: str,
    funcionario_data: EquipeUpdate,
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Atualizar um funcion√°rio existente
    
    - **funcionario_id**: UUID do funcion√°rio
    - Todos os campos s√£o opcionais - apenas os fornecidos ser√£o atualizados
    """
    try:
        logger.info(f"‚úèÔ∏è Atualizando funcion√°rio ID: {funcionario_id}")
        
        funcionario_atualizado = await repository.update(funcionario_id, funcionario_data)
        
        if not funcionario_atualizado:
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {funcionario_id} n√£o encontrado para atualiza√ß√£o")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Funcion√°rio com ID {funcionario_id} n√£o encontrado"
            )
        
        logger.info(f"‚úÖ Funcion√°rio {funcionario_atualizado.nome} atualizado com sucesso")
        return funcionario_atualizado
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar funcion√°rio {funcionario_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao atualizar funcion√°rio: {str(e)}"
        )

@router.delete('/{funcionario_id}', summary="Excluir funcion√°rio (soft delete)")
async def excluir_funcionario(
    funcionario_id: str,
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Excluir funcion√°rio (soft delete - marca como inativo)
    
    - **funcionario_id**: UUID do funcion√°rio
    """
    try:
        logger.info(f"üóëÔ∏è Excluindo funcion√°rio ID: {funcionario_id}")
        
        sucesso = await repository.delete(funcionario_id)
        
        if not sucesso:
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {funcionario_id} n√£o encontrado para exclus√£o")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Funcion√°rio com ID {funcionario_id} n√£o encontrado"
            )
        
        logger.info(f"‚úÖ Funcion√°rio {funcionario_id} exclu√≠do com sucesso")
        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "message": "Funcion√°rio exclu√≠do com sucesso",
                "funcionario_id": funcionario_id,
                "tipo": "soft_delete"
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao excluir funcion√°rio {funcionario_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao excluir funcion√°rio: {str(e)}"
        )

@router.patch('/{funcionario_id}/toggle-status', response_model=EquipeStatusToggleResponse, summary="Alternar status ativo/inativo")
async def alternar_status_funcionario(
    funcionario_id: str,
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Alternar status ativo/inativo do funcion√°rio
    
    - **funcionario_id**: UUID do funcion√°rio
    """
    try:
        logger.info(f"üîÑ Alternando status do funcion√°rio ID: {funcionario_id}")
        
        funcionario_atualizado = await repository.toggle_status(funcionario_id)
        
        if not funcionario_atualizado:
            logger.warning(f"‚ö†Ô∏è Funcion√°rio {funcionario_id} n√£o encontrado")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Funcion√°rio com ID {funcionario_id} n√£o encontrado"
            )
        
        status_texto = "ATIVO" if funcionario_atualizado.ativo else "INATIVO"
        message = f"Funcion√°rio {funcionario_atualizado.nome} agora est√° {status_texto}"
        
        logger.info(f"‚úÖ {message}")
        
        return EquipeStatusToggleResponse(
            id=funcionario_atualizado.id,
            nome=funcionario_atualizado.nome,
            ativo=funcionario_atualizado.ativo,
            message=message
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erro ao alternar status do funcion√°rio {funcionario_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao alternar status: {str(e)}"
        )

@router.get('/stats/dashboard', summary="Estat√≠sticas da equipe")
async def obter_estatisticas(
    repository: EquipeRepository = Depends(get_equipe_repository)
):
    """
    Obter estat√≠sticas completas da equipe para dashboard
    
    Retorna:
    - Total de funcion√°rios
    - Funcion√°rios ativos/inativos
    - Distribui√ß√£o por loja
    - Distribui√ß√£o por setor
    """
    try:
        logger.info("üìä Obtendo estat√≠sticas da equipe")
        
        stats = await repository.get_stats()
        
        logger.info(f"‚úÖ Estat√≠sticas calculadas: {stats['total']} funcion√°rios")
        return JSONResponse(
            status_code=status.HTTP_200_OK,
            content={
                "success": True,
                "data": stats,
                "message": "Estat√≠sticas da equipe calculadas com sucesso"
            }
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao calcular estat√≠sticas: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erro ao calcular estat√≠sticas: {str(e)}"
        )
