"""
Aplica√ß√£o principal do Fluyt Comercial - FastAPI.
Configura middleware, routers, documenta√ß√£o e seguran√ßa.
"""

from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import time
import uuid

# Core imports
from core.config import get_settings
from core.auth import AuthMiddleware
from core.exceptions import register_exception_handlers

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o.
    Configura recursos na inicializa√ß√£o e limpa na finaliza√ß√£o.
    """
    # Startup
    logger.info("üöÄ Iniciando Fluyt Comercial API...")
    settings = get_settings()
    
    # Valida√ß√£o de configura√ß√µes cr√≠ticas na inicializa√ß√£o
    try:
        if not settings.supabase_url:
            raise ValueError("SUPABASE_URL n√£o configurada")
        if not settings.jwt_secret_key:
            raise ValueError("JWT_SECRET_KEY n√£o configurada")
        
        logger.info(f"‚úÖ Configura√ß√µes validadas - Ambiente: {settings.environment}")
        logger.info(f"üìä Supabase URL: {settings.supabase_url}")
        logger.info(f"üîê JWT configurado - Expira√ß√£o: {settings.jwt_access_token_expire_minutes}min")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o de configura√ß√µes: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Finalizando Fluyt Comercial API...")


# Configura√ß√£o da aplica√ß√£o FastAPI
settings = get_settings()

app = FastAPI(
    title="Fluyt Comercial API",
    description="""
    ## üè¢ Sistema de Gest√£o Comercial para M√≥veis Planejados
    
    API REST completa para gerenciamento de or√ßamentos, clientes, ambientes e contratos.
    
    ### ‚ú® Principais Funcionalidades:
    
    - **üë• Gest√£o de Clientes:** CRUD completo com valida√ß√µes
    - **üè† Ambientes:** Importa√ß√£o e processamento de XML do Promob
    - **üí∞ Or√ßamentos:** Cria√ß√£o autom√°tica com c√°lculo de custos e margens
    - **‚úÖ Aprova√ß√µes:** Sistema hier√°rquico baseado em limites de desconto
    - **üìÑ Contratos:** Gera√ß√£o autom√°tica a partir de or√ßamentos
    - **‚öôÔ∏è Configura√ß√µes:** Regras de neg√≥cio configur√°veis por loja
    - **üìä Relat√≥rios:** Dashboards e relat√≥rios de margem (por perfil)
    
    ### üîê Autentica√ß√£o:
    - JWT Bearer Token obrigat√≥rio
    - RLS (Row Level Security) autom√°tico por loja
    - Controle de acesso por perfil (Vendedor, Gerente, Admin Master)
    
    ### üè™ Multi-loja:
    - Isolamento completo de dados por loja
    - Admin Master visualiza todas as lojas
    - Configura√ß√µes independentes por estabelecimento
    """,
    version=settings.api_version,
    openapi_url=f"/api/{settings.api_version}/openapi.json" if not settings.is_production else None,
    docs_url=f"/api/{settings.api_version}/docs" if not settings.is_production else None,
    redoc_url=f"/api/{settings.api_version}/redoc" if not settings.is_production else None,
    lifespan=lifespan
)

# ===== MIDDLEWARES =====

# 1. Request ID para rastreamento
@app.middleware("http")
async def add_request_id(request: Request, call_next):
    """Adiciona ID √∫nico para cada requisi√ß√£o para rastreamento de logs"""
    request_id = str(uuid.uuid4())
    request.state.request_id = request_id
    
    # Adiciona no header de resposta
    response = await call_next(request)
    response.headers["X-Request-ID"] = request_id
    return response

# 2. Logging de requisi√ß√µes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Log detalhado de todas as requisi√ß√µes"""
    start_time = time.time()
    
    # Log da requisi√ß√£o
    logger.info(
        f"üîµ REQUEST: {request.method} {request.url.path}",
        extra={
            "method": request.method,
            "path": request.url.path,
            "query_params": str(request.query_params),
            "request_id": getattr(request.state, 'request_id', None),
            "user_agent": request.headers.get("user-agent", ""),
            "client_ip": request.client.host if request.client else ""
        }
    )
    
    # Processa requisi√ß√£o
    response = await call_next(request)
    
    # Log da resposta
    process_time = time.time() - start_time
    logger.info(
        f"üü¢ RESPONSE: {response.status_code} - {process_time:.3f}s",
        extra={
            "status_code": response.status_code,
            "process_time": process_time,
            "request_id": getattr(request.state, 'request_id', None)
        }
    )
    
    # Adiciona tempo de processamento no header
    response.headers["X-Process-Time"] = str(process_time)
    return response

# 3. Middleware de autentica√ß√£o customizado
app.add_middleware(AuthMiddleware)

# 4. Compress√£o GZIP para respostas grandes
app.add_middleware(GZipMiddleware, minimum_size=1000)

# 5. CORS - configurado dinamicamente
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["X-Request-ID", "X-Process-Time"]
)

# ===== HANDLERS DE EXCE√á√ÉO =====
register_exception_handlers(app)

# ===== ROUTERS MODULARES =====

# Health check endpoint (sempre dispon√≠vel)
@app.get("/health", tags=["Sistema"], summary="Verifica√ß√£o de sa√∫de da API")
async def health_check():
    """
    Endpoint para verifica√ß√£o de status da API.
    Usado para monitoramento e load balancers.
    """
    return {
        "status": "healthy",
        "service": "Fluyt Comercial API",
        "version": settings.api_version,
        "environment": settings.environment,
        "timestamp": time.time()
    }

# Root endpoint com informa√ß√µes b√°sicas
@app.get("/", tags=["Sistema"], summary="Informa√ß√µes da API")
async def root():
    """Informa√ß√µes b√°sicas sobre a API"""
    return {
        "message": "Fluyt Comercial API",
        "version": settings.api_version,
        "docs": f"/api/{settings.api_version}/docs" if not settings.is_production else None,
        "health": "/health"
    }

# Registro de routers modulares
# Prefixo padr√£o para versionamento: /api/v1

prefix = f"/api/{settings.api_version}"

# ===== IMPORTA√á√ÉO DIN√ÇMICA DOS ROUTERS =====
# Cada m√≥dulo deve ter um arquivo controller.py com uma vari√°vel 'router'

try:
    # M√≥dulo de Autentica√ß√£o (sem autentica√ß√£o obrigat√≥ria)
    from modules.auth.routes import router as auth_router
    app.include_router(auth_router, prefix=f"{prefix}", tags=["üîê Autentica√ß√£o"])
    
    from modules.equipe.controller import router as equipe_router
    app.include_router(equipe_router, prefix=f"{prefix}/equipe", tags=["üë• Equipe"])

    # M√≥dulos principais (requerem autentica√ß√£o)
    from modules.clientes.controller import router as clientes_router
    app.include_router(clientes_router, prefix=f"{prefix}/clientes", tags=["üë• Clientes"])

    from modules.ambientes.controller import router as ambientes_router
    app.include_router(ambientes_router, prefix=f"{prefix}/ambientes", tags=["üè† Ambientes"])

    from modules.orcamentos.controller import router as orcamentos_router
    app.include_router(orcamentos_router, prefix=f"{prefix}/orcamentos", tags=["üí∞ Or√ßamentos"])

    from modules.aprovacoes.controller import router as aprovacoes_router
    app.include_router(aprovacoes_router, prefix=f"{prefix}/aprovacoes", tags=["‚úÖ Aprova√ß√µes"])

    from modules.contratos.controller import router as contratos_router
    app.include_router(contratos_router, prefix=f"{prefix}/contratos", tags=["üìÑ Contratos"])

    from modules.configuracoes.controller import router as configuracoes_router
    app.include_router(configuracoes_router, prefix=f"{prefix}/configuracoes", tags=["‚öôÔ∏è Configura√ß√µes"])

    from modules.montadores.controller import router as montadores_router
    app.include_router(montadores_router, prefix=f"{prefix}/montadores", tags=["üîß Montadores"])

    from modules.transportadoras.controller import router as transportadoras_router
    app.include_router(transportadoras_router, prefix=f"{prefix}/transportadoras", tags=["üöõ Transportadoras"])

    from modules.status_orcamento.controller import router as status_router
    app.include_router(status_router, prefix=f"{prefix}/status", tags=["üìä Status"])

    # M√≥dulos de sistema
    from modules.xml_logs.controller import router as xml_logs_router
    app.include_router(xml_logs_router, prefix=f"{prefix}/xml-logs", tags=["üìã Logs XML"])

    from modules.auditoria.controller import router as auditoria_router
    app.include_router(auditoria_router, prefix=f"{prefix}/auditoria", tags=["üîç Auditoria"])

    # ‚ö†Ô∏è ENDPOINTS TEMPOR√ÅRIOS DE TESTE - SEM AUTENTICA√á√ÉO!
    if settings.is_development:
        from modules.test_endpoints.routes import router as test_router
        app.include_router(test_router, prefix=f"{prefix}", tags=["üö® TESTE TEMPOR√ÅRIO"])
        logger.warning("üö® ENDPOINTS DE TESTE TEMPOR√ÅRIOS ATIVADOS - REMOVER EM PRODU√á√ÉO!")

    logger.info("‚úÖ Todos os routers modulares carregados com sucesso")

except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Alguns m√≥dulos ainda n√£o implementados: {e}")
    # Em desenvolvimento, alguns m√≥dulos podem n√£o existir ainda

# ===== MIDDLEWARE DE DESENVOLVIMENTO =====
if settings.is_development:
    @app.middleware("http")
    async def debug_headers(request: Request, call_next):
        """Adiciona headers de debug em desenvolvimento"""
        response = await call_next(request)
        response.headers["X-Environment"] = "development"
        response.headers["X-Debug"] = "true"
        return response

# ===== EVENTOS DE STARTUP ADICIONAIS =====
@app.on_event("startup")
async def startup_event():
    """Configura√ß√µes adicionais no startup"""
    logger.info("üîß Executando configura√ß√µes de startup...")
    
    # Aqui podem ser adicionadas tarefas como:
    # - Verifica√ß√£o de conectividade com Supabase
    # - Carregamento de cache inicial
    # - Inicializa√ß√£o de workers de background
    
    logger.info("‚úÖ Startup conclu√≠do com sucesso!")

# ===== CONFIGURA√á√ÉO FINAL =====
if __name__ == "__main__":
    import uvicorn
    
    # Configura√ß√£o para execu√ß√£o direta (desenvolvimento)
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.is_development,
        log_level=settings.log_level.lower(),
        access_log=True
    )
