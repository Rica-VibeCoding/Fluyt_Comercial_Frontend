● Excelente ideia! Vou criar um documento detalhado que você pode salvar
  para garantir continuidade caso perca o histórico. Aqui está a
  documentação completa:

  📋 DOCUMENTO DE PLANEJAMENTO - CORREÇÃO ERRO SSR/clientModules

  🚨 CONTEXTO CRÍTICO

  - Erro Atual: TypeError: Cannot read properties of undefined (reading 
  'clientModules')
  - Sistema: Next.js 15.3.3 + React 19 + Zustand + Sistema de Persistência     
   Inteligente
  - Problema: Conflitos SSR/CSR causando falha na inicialização
  - Status: Plan mode ativo, aguardando execução

  🎯 OBJETIVO PRINCIPAL

  Corrigir erro de SSR que impede inicialização da aplicação, mantendo
  todas as funcionalidades existentes de persistência inteligente por
  cliente.

  ---
  📝 PLANO DETALHADO DE EXECUÇÃO

  FASE 1: CORREÇÃO LAYOUT RAIZ (CRÍTICO - PRIORIDADE MÁXIMA)

  Arquivo: src/app/layout.tsx

  Problema: 'use client' no layout raiz força toda aplicação ao
  client-side
  Ação Detalhada:

  1. Remover 'use client' da primeira linha
  2. Criar novo arquivo src/components/providers/client-providers.tsx
  3. Mover QueryClient, TooltipProvider, Toaster para o novo arquivo
  4. Importar ClientProviders no layout como componente filho

  Código para ClientProviders:
  'use client';
  // Todos os providers que precisam rodar no cliente
  // QueryClient, TooltipProvider, Toaster, etc.

  ---
  FASE 2: PROTEÇÃO LOCALSTORAGE (CRÍTICO - PRIORIDADE MÁXIMA)

  Arquivo: src/lib/store/cliente-store.ts

  Problema: Acesso direto ao localStorage durante SSR
  Ações Detalhadas:

  1. Adicionar guards SSR em TODOS os métodos:
  // Antes de qualquer localStorage.setItem/getItem
  if (typeof window === 'undefined') return;

  2. Verificar funções:
    - salvarCliente()
    - carregarCliente()
    - removerCliente()
    - limparTodosClientes()
  3. Adicionar tratamento de erro para falhas de localStorage

  ---
  FASE 3: STORE ZUSTAND SEGURO (ALTA PRIORIDADE)

  Arquivo: src/store/sessao-store.ts

  Problema: Chamadas para persistenciaInteligente durante SSR
  Ações Detalhadas:

  1. Envolver TODAS as chamadas persistenciaInteligente.* com:
  if (typeof window !== 'undefined') {
    persistenciaInteligente.salvarSessaoCliente(...)
  }

  2. Funções a proteger:
    - definirCliente()
    - salvarSessaoAtual()
    - carregarSessaoCliente()
    - limparSessaoCompleta()

  ---
  FASE 4: SISTEMA PERSISTÊNCIA (ALTA PRIORIDADE)

  Arquivo: src/lib/persistencia-inteligente.ts

  Problema: Timers e cleanup automático rodando durante SSR
  Ações Detalhadas:

  1. Modificar construtor da classe:
  constructor() {
    // Só inicializar no cliente
    if (typeof window !== 'undefined') {
      this.iniciarCleanupAutomatico();
      this.limparSessoesExpiradas();
    }
  }

  2. Adicionar guards em TODOS os métodos que usam localStorage
  3. Criar inicialização lazy para a instância singleton

  ---
  FASE 5: HOOKS FORTALECIDOS (MÉDIA PRIORIDADE)

  Arquivo: src/hooks/globais/use-local-storage.ts

  Problema: Precisa de proteção SSR mais robusta
  Ações Detalhadas:

  1. Melhorar verificação inicial:
  const [storedValue, setStoredValue] = useState(() => {
    if (typeof window === 'undefined') {
      return initialValue; // Sempre retornar valor padrão no servidor
    }
    // Resto da lógica...
  });

  2. Adicionar tratamento de erro mais robusto
  3. Verificar compatibilidade com hidratação

  ---
  FASE 6: AUDITORIA COMPONENTES (BAIXA PRIORIDADE)

  Arquivos: Vários componentes com 'use client'

  Problema: 25+ componentes podem ter diretivas desnecessárias
  Ações Detalhadas:

  1. Listar todos os arquivos com 'use client'
  2. Avaliar necessidade de cada um
  3. Remover diretivas desnecessárias
  4. Otimizar fronteiras SSR/CSR

  ---
  🔧 INSTRUÇÕES DE EXECUÇÃO

  Para Retomar Trabalho Sem Contexto:

  1. Verifique o erro atual:
  npm run dev

  2. Confirme se ainda é clientModules error
  3. Execute fases na ordem:
    - Fase 1 → Teste → Fase 2 → Teste → etc.
  4. Teste após cada fase:
  npm run dev

  5. Se erro persistir, verifique se todas as proteções SSR foram
  aplicadas

  Comandos de Teste:

  # Testar build
  npm run build

  # Testar desenvolvimento
  npm run dev

  # Verificar tipos
  npm run type-check

  ---
  📂 ARQUIVOS PRINCIPAIS A MODIFICAR

  1. src/app/layout.tsx - Remover 'use client'
  2. src/components/providers/client-providers.tsx - CRIAR NOVO
  3. src/lib/store/cliente-store.ts - Adicionar guards SSR
  4. src/store/sessao-store.ts - Proteger persistência
  5. src/lib/persistencia-inteligente.ts - Lazy initialization
  6. src/hooks/globais/use-local-storage.ts - Fortalecer SSR

  ---
  🎯 RESULTADOS ESPERADOS

  Antes: Erro clientModules impede inicialização
  Depois:
  - ✅ Next.js inicia normalmente
  - ✅ SSR funcionando
  - ✅ Persistência por cliente mantida
  - ✅ Performance melhorada
  - ✅ Todos os comentários em PT-BR

  ---
  🚨 NOTAS IMPORTANTES

  1. SEMPRE testar após cada fase
  2. NUNCA pular a ordem das fases
  3. MANTER todas as funcionalidades existentes
  4. ADICIONAR comentários em português brasileiro
  5. BACKUP do código antes de começar

  ---
  Este documento contém TUDO necessário para retomar o trabalho caso perca     
   o contexto da conversa.

  Salve este documento e use como referência para continuar o projeto!