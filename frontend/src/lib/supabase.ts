import { createClient } from '@supabase/supabase-js'

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || ''
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''

// Verificar se as configura√ß√µes s√£o v√°lidas
const isConfigured = supabaseUrl && 
                    supabaseAnonKey && 
                    !supabaseUrl.includes('COLE_SEU') && 
                    !supabaseAnonKey.includes('COLE_SUA') &&
                    supabaseUrl.startsWith('https://') &&
                    supabaseUrl.includes('.supabase.co')

// Cliente Supabase - s√≥ criar se configurado corretamente
let supabase = null
try {
  supabase = isConfigured 
    ? createClient(supabaseUrl, supabaseAnonKey)
    : null
  
  if (!isConfigured) {
    console.warn('‚ö†Ô∏è Supabase n√£o configurado. Configure as vari√°veis de ambiente NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY');
  }
} catch (error) {
  console.error('‚ùå Erro ao criar cliente Supabase:', error)
}

export { supabase }

// Flag para verificar se est√° configurado
export const isSupabaseConfigured = isConfigured

// Fun√ß√£o para testar conectividade
export async function testConnection() {
  try {
    console.log('üîó Testando conectividade com Supabase...')
    
    // Verificar se est√° configurado
    if (!isSupabaseConfigured || !supabase) {
      return {
        success: false,
        message: 'Supabase n√£o configurado',
        error: 'Configure as vari√°veis NEXT_PUBLIC_SUPABASE_URL e NEXT_PUBLIC_SUPABASE_ANON_KEY no arquivo .env.local'
      }
    }
    
    // Teste b√°sico de conectividade
    const { data, error } = await supabase
      .from('_test')
      .select('*')
      .limit(1)
    
    if (error) {
      console.log('‚ö†Ô∏è Erro esperado (tabela _test n√£o existe):', error.message)
      console.log('‚úÖ Conex√£o estabelecida com sucesso!')
      return { success: true, message: 'Conex√£o com Supabase funcionando' }
    }
    
    console.log('‚úÖ Conex√£o e consulta realizadas com sucesso!')
    return { success: true, message: 'Conex√£o com Supabase funcionando', data }
    
  } catch (err) {
    console.error('‚ùå Erro de conectividade:', err)
    return { 
      success: false, 
      message: 'Erro de conectividade com Supabase',
      error: err instanceof Error ? err.message : 'Erro desconhecido'
    }
  }
}

// Fun√ß√£o para verificar status de autentica√ß√£o
export async function checkAuthStatus() {
  try {
    // Verificar se est√° configurado
    if (!isSupabaseConfigured || !supabase) {
      return {
        authenticated: false,
        error: 'Supabase n√£o configurado. Configure as vari√°veis de ambiente primeiro.'
      }
    }

    const { data: { session }, error } = await supabase.auth.getSession()
    
    if (error) {
      console.log('‚ö†Ô∏è Erro de autentica√ß√£o:', error.message)
      return { authenticated: false, error: error.message }
    }
    
    const isAuthenticated = !!session
    console.log(`üîê Status de autentica√ß√£o: ${isAuthenticated ? 'Autenticado' : 'N√£o autenticado'}`)
    
    return { 
      authenticated: isAuthenticated, 
      session,
      user: session?.user || null
    }
    
  } catch (err) {
    console.error('‚ùå Erro ao verificar autentica√ß√£o:', err)
    return { 
      authenticated: false, 
      error: err instanceof Error ? err.message : 'Erro desconhecido' 
    }
  }
}