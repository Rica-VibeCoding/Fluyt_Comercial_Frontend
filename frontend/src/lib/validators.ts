/**
 * VALIDATORS COMPARTILHADOS
 * Fun√ß√µes de valida√ß√£o reutiliz√°veis para o m√≥dulo de or√ßamento
 */

import { FormaPagamento } from '@/types/orcamento';

// Resultado de valida√ß√£o padr√£o
export interface ValidationResult {
  isValid: boolean;
  message?: string;
}

// Validar se valor est√° dentro do limite dispon√≠vel
export const validarValorDisponivel = (
  valor: number,
  valorMaximo: number,
  valorJaAlocado: number,
  redistribuicaoAtiva?: boolean // üÜï FASE 1: Permitir bypass quando redistribui√ß√£o ativa
): ValidationResult => {
  const valorRestante = valorMaximo - valorJaAlocado;
  
  if (valor <= 0) {
    return {
      isValid: false,
      message: 'Valor deve ser maior que zero'
    };
  }
  
  // üÜï PULAR valida√ß√£o de limite quando redistribui√ß√£o autom√°tica est√° ativa
  if (redistribuicaoAtiva) {
    console.log('üîÑ Valida√ß√£o de limite ignorada - redistribui√ß√£o autom√°tica ativa');
    return { isValid: true };
  }
  
  if (valor > valorRestante) {
    return {
      isValid: false,
      message: `Valor excede o dispon√≠vel: R$ ${valorRestante.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`
    };
  }
  
  return { isValid: true };
};

// üÜï FASE 1: Fun√ß√£o auxiliar para verificar se redistribui√ß√£o autom√°tica est√° ativa
// AGORA: Sistema √© manual por padr√£o (via bot√£o "Atualizar")
export const isRedistribuicaoAutomaticaAtiva = (): boolean => {
  try {
    const sessionData = localStorage.getItem('fluyt_sessao_simples');
    const session = sessionData ? JSON.parse(sessionData) : {};
    // Default: redistribui√ß√£o √© MANUAL (false) - s√≥ ativa via bot√£o
    return session.redistribuicaoAutomatica === true;
  } catch {
    return false; // Default: manual via bot√£o "Atualizar"
  }
};

// Validar se a soma das formas n√£o excede o valor negociado
export const validarSomaFormas = (
  formas: FormaPagamento[],
  valorNegociado: number
): ValidationResult => {
  const somaFormas = formas.reduce((total, forma) => total + forma.valor, 0);
  
  if (somaFormas > valorNegociado) {
    const excesso = somaFormas - valorNegociado;
    return {
      isValid: false,
      message: `Soma das formas excede o valor negociado em R$ ${excesso.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`
    };
  }
  
  return { isValid: true };
};

// Validar se todas as formas t√™m valores v√°lidos
export const validarFormas = (formas: FormaPagamento[]): ValidationResult => {
  for (const forma of formas) {
    if (forma.valor <= 0) {
      return {
        isValid: false,
        message: `Forma "${forma.tipo}" tem valor inv√°lido`
      };
    }
    
    if (forma.parcelas && forma.parcelas < 1) {
      return {
        isValid: false,
        message: `Forma "${forma.tipo}" tem n√∫mero de parcelas inv√°lido`
      };
    }
  }
  
  return { isValid: true };
};

// Validar se o desconto est√° dentro dos limites
export const validarDesconto = (
  desconto: number,
  valorOriginal: number
): ValidationResult => {
  if (desconto < 0) {
    return {
      isValid: false,
      message: 'Desconto n√£o pode ser negativo'
    };
  }
  
  if (desconto > 100) {
    return {
      isValid: false,
      message: 'Desconto n√£o pode ser maior que 100%'
    };
  }
  
  const valorComDesconto = valorOriginal - (valorOriginal * desconto / 100);
  if (valorComDesconto <= 0) {
    return {
      isValid: false,
      message: 'Desconto resulta em valor zero ou negativo'
    };
  }
  
  return { isValid: true };
};

// Validar se a taxa est√° dentro dos limites razo√°veis
export const validarTaxa = (taxa: number): ValidationResult => {
  if (taxa < 0) {
    return {
      isValid: false,
      message: 'Taxa n√£o pode ser negativa'
    };
  }
  
  if (taxa > 50) {
    return {
      isValid: false,
      message: 'Taxa muito alta (m√°ximo 50%)'
    };
  }
  
  return { isValid: true };
};

// Validar se o n√∫mero de parcelas est√° dentro dos limites
export const validarNumeroParcelas = (
  parcelas: number,
  tipoFormaPagamento: 'a-vista' | 'boleto' | 'cartao' | 'financeira'
): ValidationResult => {
  if (parcelas < 1) {
    return {
      isValid: false,
      message: 'N√∫mero de parcelas deve ser pelo menos 1'
    };
  }
  
  // Limites espec√≠ficos por tipo
  const limites = {
    'a-vista': 1,
    'boleto': 60,
    'cartao': 12,
    'financeira': 60
  };
  
  const limite = limites[tipoFormaPagamento];
  
  if (parcelas > limite) {
    return {
      isValid: false,
      message: `M√°ximo de ${limite} parcelas para ${tipoFormaPagamento}`
    };
  }
  
  return { isValid: true };
};

// Validar se uma data est√° no futuro - SEM problemas de fuso hor√°rio
export const validarDataFutura = (data: string): ValidationResult => {
  if (!data) {
    return {
      isValid: false,
      message: 'Data √© obrigat√≥ria'
    };
  }
  
  // Obter data atual no formato YYYY-MM-DD de forma segura
  const hoje = new Date();
  const anoHoje = hoje.getFullYear();
  const mesHoje = String(hoje.getMonth() + 1).padStart(2, '0');
  const diaHoje = String(hoje.getDate()).padStart(2, '0');
  const dataHojeString = `${anoHoje}-${mesHoje}-${diaHoje}`;
  
  // Comparar strings de data diretamente (YYYY-MM-DD)
  if (data < dataHojeString) {
    return {
      isValid: false,
      message: 'Data deve ser hoje ou no futuro'
    };
  }
  
  return { isValid: true };
};

// Valida√ß√£o completa de uma forma de pagamento
export const validarFormaPagamento = (
  forma: Partial<FormaPagamento>,
  valorMaximo: number,
  valorJaAlocado: number
): ValidationResult => {
  if (!forma.tipo) {
    return { isValid: false, message: 'Tipo da forma de pagamento √© obrigat√≥rio' };
  }
  
  if (!forma.valor || forma.valor <= 0) {
    return { isValid: false, message: 'Valor √© obrigat√≥rio e deve ser maior que zero' };
  }
  
  // Validar valor dispon√≠vel
  const validacaoValor = validarValorDisponivel(forma.valor, valorMaximo, valorJaAlocado);
  if (!validacaoValor.isValid) {
    return validacaoValor;
  }
  
  // Validar n√∫mero de parcelas se especificado
  if (forma.parcelas) {
    const validacaoParcelas = validarNumeroParcelas(forma.parcelas, forma.tipo);
    if (!validacaoParcelas.isValid) {
      return validacaoParcelas;
    }
  }
  
  return { isValid: true };
};